def parse_file(fnm, with_ts=False, datafld="../data/test/kbfi-wnb"):    
    
    fnm = datafld + "/out_" + fnm + "_dayly.txt"  
        
    infile = open(fnm,"r")
    res = []
    lnr = 0
    for i in infile:
        from datetime import datetime        
        if lnr < 3: lnr += 1; continue
        lnr += 1
        ts, val, nr = i.split(" ")
        ts = datetime.fromtimestamp(float(ts[:-1]))
        if val == "-1.#IND000000e+000":
            if with_ts: 
                res.append((ts, 0))
            else:
                res.append(0)
            continue
        val = float(i.split(" ")[1])
        if with_ts: 
            res.append((ts, val))
        else:
            res.append(val)
        
    return res

def get_network_in_out():
    net_in = parse_file("bytes_in")
    net_out = parse_file("bytes_out")
    # convert to GB, multply by the number of seconds in a day
    from common.utils import minusone_or_value
    return ([minusone_or_value(x/(1024*1024*1024)*3600*24) for x in net_in], 
            [minusone_or_value(x/(1024*1024*1024)*3600*24) for x in net_out])

def get_load_and_ts():
    ts, cpu_raw = zip(*parse_file("load_five", True))
    ts = list(ts)    
    # TODO: scaling factor must come from the test data configuration
    cpu = [x*1.5 for x in cpu_raw] # to get to the CU scale
    return (ts, cpu)

def get_used_mem():
    # for memory the calculation is a bit more complicated
    mem_buff = parse_file("mem_buffers")
    mem_cached = parse_file("mem_cached")
    mem_free = parse_file("mem_free")
    mem_shared = parse_file("mem_shared")
    mem_total = parse_file("mem_total")

    # used_mem = mem_total - mem_shared - mem_free - mem_cached - mem_buffers
    used_mem = []
    for i in range(len(mem_buff)):
        used_mem.append((mem_total[i] - mem_shared[i] - mem_free[i] - mem_cached[i] - mem_buff[i])/1024/1024)
    return used_mem