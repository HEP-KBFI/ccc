class Infrastructure:
    """Abstraction of the infrastructure being analyzed"""
    #TODO: this is a messed up abstraction at the moment - methods are actually class methods, not object
    description = ""
    
    import random
    # we go from 80TB to 100 TB     
    pseudo_storage = [random.randrange(80*1024, 100*1024) for i in range(1, 13)]
    
    def __init__(self, description = ""):
        self.description = description
    
    def get_demand_month(self, year, month):
        """Return average demand curve for a given month with a per-day resolution"""
        from sitio.backend import db
        from datetime import datetime
        import calendar
        start_date = datetime(year, month, 1)
        end_date = datetime(year, month, calendar.monthrange(year,month)[1])
        return (map(lambda x: x*24, db.get_values("cpu_load", start_date, end_date)),
                map(lambda x: x*24, db.get_values("used_mem", start_date, end_date)),
                map(lambda x: x*24, db.get_values("net_in", start_date, end_date)),
                map(lambda x: x*24, db.get_values("net_out", start_date, end_date))
                )
        
    def get_demand_year(self, year, averaged=False):
        """Return average demand curve for a year with a per-month resolution."""
        res = []
        for month in range(1, 13):
            cpu, mem, net_in, net_out = self.get_demand_month(year, month)    
            if len(cpu) == 0:
                res.append((0, 0, 0, 0))
            else:
                if averaged: 
                    res.append((sum(cpu)/len(cpu), sum(mem)/len(mem), sum(net_in), sum(net_out)))
                else:
                    res.append((sum(cpu), sum(mem), sum(net_in), sum(net_out)))
        return res
    
    # TODO: replace with an actual data
    def get_storage_year(self, year):
        """A stub function that returns a relatively reasonable used space numbers."""
        return self.pseudo_storage
    
